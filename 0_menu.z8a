menu_draw_char:

; Takes column/row (bc) and pointer (hl) and draws a character to the display
; buffer

    ; Get the memory location of the first line of a character

    ; Calculate high byte of display location

    ; The high byte represents the display section and line number (which is
    ; added later on)

    ld a,e

    ; Discard all but bits 3 and 4. Taken in isolation, these are the offsets
    ; for the display section, specifically 0x00, 0x08 and 0x10
    and 0x18 ;

    ; The high byte for the first line of each character is either 0x40, 0x48
    ; or 0x50, depending on which section it recides in
    add a,0x40

    ld b,a

    ; Calculate low byte of display location

    ; The low byte represents row and column numbers

    ld a,e

    ; This calculates the row number grouped by display section, i.e.:
    ; row 0 = 0x00, row 1 = 0x20, row 7 = 0xE0, row 8 = 0x00, etc.
    rrca
    rrca
    rrca
    and 0xf0

    ; The first line of each column is offset by a byte
    add a,d

    ld d,b
    ld e,a

    ; A character has 8 lines
    ld b,8

menu_draw_line:

; Draw a character line by line

    ld a,(de)
    xor (hl)
    ld (de),a
    inc l

    ; The high byte is incremented to get the destination of the next line
    inc d

    djnz menu_draw_line

    ret

print_next:

    inc hl
    inc d

print:

    ld a,(hl)
    or a
    cp 0
    ret z

    push hl
    push de

print_char:

    ld b,3

    ld h,0
    ld l,a

multiply:

    add hl,hl
    djnz multiply

    ld d,h
    ld e,l

    ld hl,0x3d00 - (8 * 0x20)
    add hl,de
    pop de
    push de
    call menu_draw_char
    pop de
    pop hl
    jp print_next

select_difficulty_draw:

    ld b,6

select_difficulty_draw_next:

    push hl
    push de
    push bc
    call menu_draw_char
    pop bc
    pop de
    pop hl
    inc d
    djnz select_difficulty_draw_next
    ret

select_difficulty:

    ld hl,difficulties
    ld de,DIFFICULTIES_ROW_LENGTH
    or a ; Reset carry flag
    sbc hl,de

select_difficulty_move_pointer:

    add hl,de
    djnz select_difficulty_move_pointer

    push hl
    pop ix

    ld d,(ix + 3)
    ld e,(ix + 2)

    ld hl,0x81c0

    call select_difficulty_draw
    ret

menu_start:

    ld a,(23672)
    ld (menu_last_direction_frame_count),a

    ; Set border color to black
    xor a ; a = 0
    call $229B

    ; Clear screen
    ld hl,0x4000
    ld de,0x4001
    ld bc,0x17ff
    ld (hl),0
    ldir

    ld ix,difficulties

    ld h,(ix + 1)
    ld l,(ix)
    ld d,(ix + 3)
    ld e,(ix + 2)
    call print

    ld h,(ix + 6)
    ld l,(ix + 5)
    ld d,(ix + 8)
    ld e,(ix + 7)
    call print

    ld h,(ix + 11)
    ld l,(ix + 10)
    ld d,(ix + 13)
    ld e,(ix + 12)
    call print

    ld a,(difficulty)
    inc a
    ld b,a

    ld de,5
    ld hl,difficulties - 3

select_difficulty_offset_increment:

    add hl,de

    djnz select_difficulty_offset_increment

    ld a,(hl)
    ld e,a
    inc hl
    ld a,(hl)
    ld d,a

    ld hl,0x81c0
    call select_difficulty_draw

input_loop:

    ; Kempston
    in a,(0x1f)

    ; Only capture up/down/fire
    and 0x1c

    ld b,a

    ld hl,menu_last_direction
    cp (hl)

    jr nz,menu_change_direction

    ; Same direction

    bit 4,a
    jr nz,init

    ld a,(23672)
    ld hl,menu_last_direction_frame_count
    sub (hl)
    sub 20
    jr c,input_loop

menu_change_direction:

    ld a,b
    ld (menu_last_direction),a
    ld a,(23672)
    ld (menu_last_direction_frame_count),a

    ld hl,difficulty

    ld a,b

    bit 3,a
    jr nz,menu_kempston_joy_up

    bit 2,a
    jr nz,menu_kempston_joy_down

    jr input_loop

menu_kempston_joy_up:

    ld a,(hl)
    dec a
    cp 0xff
    jr nz,difficulty_lower

    ld a,2

difficulty_lower:

    ld d,a

    jr unselect_current_difficulty

menu_kempston_joy_down:

    ld a,(hl)
    inc a
    cp 0x03
    jr nz,difficulty_higher

    xor a

difficulty_higher:

    ld d,a

unselect_current_difficulty:

    push de

    ld b,(hl)
    inc b

    call select_difficulty

; Select new difficulty

    pop af

    ; Store new difficulty
    ld hl,difficulty
    ld (hl),a

    ld b,a
    inc b

    call select_difficulty

    jr input_loop
